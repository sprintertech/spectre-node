// Code generated by MockGen. DO NOT EDIT.
// Source: ./chains/evm/executor/step.go
//
// Generated by this command:
//
//	mockgen -source=./chains/evm/executor/step.go -destination=./mock/executor.go -package mock
//
// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	message "github.com/sygmaprotocol/spectre-node/chains/evm/message"
	transactor "github.com/sygmaprotocol/sygma-core/chains/evm/transactor"
	gomock "go.uber.org/mock/gomock"
)

// MockStepSubmitter is a mock of StepSubmitter interface.
type MockStepSubmitter struct {
	ctrl     *gomock.Controller
	recorder *MockStepSubmitterMockRecorder
}

// MockStepSubmitterMockRecorder is the mock recorder for MockStepSubmitter.
type MockStepSubmitterMockRecorder struct {
	mock *MockStepSubmitter
}

// NewMockStepSubmitter creates a new mock instance.
func NewMockStepSubmitter(ctrl *gomock.Controller) *MockStepSubmitter {
	mock := &MockStepSubmitter{ctrl: ctrl}
	mock.recorder = &MockStepSubmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStepSubmitter) EXPECT() *MockStepSubmitterMockRecorder {
	return m.recorder
}

// Step mocks base method.
func (m *MockStepSubmitter) Step(args message.SyncStepInput, poseidonCommitment [32]byte, opts transactor.TransactOptions) (*common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Step", args, poseidonCommitment, opts)
	ret0, _ := ret[0].(*common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Step indicates an expected call of Step.
func (mr *MockStepSubmitterMockRecorder) Step(args, poseidonCommitment, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Step", reflect.TypeOf((*MockStepSubmitter)(nil).Step), args, poseidonCommitment, opts)
}

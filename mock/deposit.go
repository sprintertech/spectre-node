// Code generated by MockGen. DO NOT EDIT.
// Source: ./chains/evm/listener/events/handlers/deposit.go
//
// Generated by this command:
//
//	mockgen -source=./chains/evm/listener/events/handlers/deposit.go -destination=./mock/deposit.go -package mock
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	big "math/big"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "go.uber.org/mock/gomock"
)

// MockEventFetcher is a mock of EventFetcher interface.
type MockEventFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockEventFetcherMockRecorder
}

// MockEventFetcherMockRecorder is the mock recorder for MockEventFetcher.
type MockEventFetcherMockRecorder struct {
	mock *MockEventFetcher
}

// NewMockEventFetcher creates a new mock instance.
func NewMockEventFetcher(ctrl *gomock.Controller) *MockEventFetcher {
	mock := &MockEventFetcher{ctrl: ctrl}
	mock.recorder = &MockEventFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventFetcher) EXPECT() *MockEventFetcherMockRecorder {
	return m.recorder
}

// FetchEventLogs mocks base method.
func (m *MockEventFetcher) FetchEventLogs(ctx context.Context, contractAddress common.Address, event string, startBlock, endBlock *big.Int) ([]types.Log, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchEventLogs", ctx, contractAddress, event, startBlock, endBlock)
	ret0, _ := ret[0].([]types.Log)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchEventLogs indicates an expected call of FetchEventLogs.
func (mr *MockEventFetcherMockRecorder) FetchEventLogs(ctx, contractAddress, event, startBlock, endBlock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchEventLogs", reflect.TypeOf((*MockEventFetcher)(nil).FetchEventLogs), ctx, contractAddress, event, startBlock, endBlock)
}

// MockProver is a mock of Prover interface.
type MockProver struct {
	ctrl     *gomock.Controller
	recorder *MockProverMockRecorder
}

// MockProverMockRecorder is the mock recorder for MockProver.
type MockProverMockRecorder struct {
	mock *MockProver
}

// NewMockProver creates a new mock instance.
func NewMockProver(ctrl *gomock.Controller) *MockProver {
	mock := &MockProver{ctrl: ctrl}
	mock.recorder = &MockProverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProver) EXPECT() *MockProverMockRecorder {
	return m.recorder
}

// RotateProof mocks base method.
func (m *MockProver) RotateProof(slot uint64) ([32]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RotateProof", slot)
	ret0, _ := ret[0].([32]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RotateProof indicates an expected call of RotateProof.
func (mr *MockProverMockRecorder) RotateProof(slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotateProof", reflect.TypeOf((*MockProver)(nil).RotateProof), slot)
}

// StepProof mocks base method.
func (m *MockProver) StepProof() ([32]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StepProof")
	ret0, _ := ret[0].([32]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StepProof indicates an expected call of StepProof.
func (mr *MockProverMockRecorder) StepProof() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StepProof", reflect.TypeOf((*MockProver)(nil).StepProof))
}

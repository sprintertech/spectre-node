// Code generated by MockGen. DO NOT EDIT.
// Source: ./chains/evm/prover/prover.go
//
// Generated by this command:
//
//	mockgen -source=./chains/evm/prover/prover.go -destination=./mock/prover.go -package mock
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	api "github.com/attestantio/go-eth2-client/api"
	phase0 "github.com/attestantio/go-eth2-client/spec/phase0"
	consensus "github.com/umbracle/go-eth-consensus"
	gomock "go.uber.org/mock/gomock"
)

// MockLightClient is a mock of LightClient interface.
type MockLightClient struct {
	ctrl     *gomock.Controller
	recorder *MockLightClientMockRecorder
}

// MockLightClientMockRecorder is the mock recorder for MockLightClient.
type MockLightClientMockRecorder struct {
	mock *MockLightClient
}

// NewMockLightClient creates a new mock instance.
func NewMockLightClient(ctrl *gomock.Controller) *MockLightClient {
	mock := &MockLightClient{ctrl: ctrl}
	mock.recorder = &MockLightClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLightClient) EXPECT() *MockLightClientMockRecorder {
	return m.recorder
}

// Bootstrap mocks base method.
func (m *MockLightClient) Bootstrap(blockRoot string) (*consensus.LightClientBootstrapCapella, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bootstrap", blockRoot)
	ret0, _ := ret[0].(*consensus.LightClientBootstrapCapella)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bootstrap indicates an expected call of Bootstrap.
func (mr *MockLightClientMockRecorder) Bootstrap(blockRoot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bootstrap", reflect.TypeOf((*MockLightClient)(nil).Bootstrap), blockRoot)
}

// FinalityUpdate mocks base method.
func (m *MockLightClient) FinalityUpdate() (*consensus.LightClientFinalityUpdateCapella, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalityUpdate")
	ret0, _ := ret[0].(*consensus.LightClientFinalityUpdateCapella)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalityUpdate indicates an expected call of FinalityUpdate.
func (mr *MockLightClientMockRecorder) FinalityUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalityUpdate", reflect.TypeOf((*MockLightClient)(nil).FinalityUpdate))
}

// Updates mocks base method.
func (m *MockLightClient) Updates(period uint64) ([]*consensus.LightClientUpdateCapella, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updates", period)
	ret0, _ := ret[0].([]*consensus.LightClientUpdateCapella)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Updates indicates an expected call of Updates.
func (mr *MockLightClientMockRecorder) Updates(period any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updates", reflect.TypeOf((*MockLightClient)(nil).Updates), period)
}

// MockBeaconClient is a mock of BeaconClient interface.
type MockBeaconClient struct {
	ctrl     *gomock.Controller
	recorder *MockBeaconClientMockRecorder
}

// MockBeaconClientMockRecorder is the mock recorder for MockBeaconClient.
type MockBeaconClientMockRecorder struct {
	mock *MockBeaconClient
}

// NewMockBeaconClient creates a new mock instance.
func NewMockBeaconClient(ctrl *gomock.Controller) *MockBeaconClient {
	mock := &MockBeaconClient{ctrl: ctrl}
	mock.recorder = &MockBeaconClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeaconClient) EXPECT() *MockBeaconClientMockRecorder {
	return m.recorder
}

// BeaconBlockRoot mocks base method.
func (m *MockBeaconClient) BeaconBlockRoot(ctx context.Context, opts *api.BeaconBlockRootOpts) (*api.Response[*phase0.Root], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeaconBlockRoot", ctx, opts)
	ret0, _ := ret[0].(*api.Response[*phase0.Root])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeaconBlockRoot indicates an expected call of BeaconBlockRoot.
func (mr *MockBeaconClientMockRecorder) BeaconBlockRoot(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeaconBlockRoot", reflect.TypeOf((*MockBeaconClient)(nil).BeaconBlockRoot), ctx, opts)
}

// Domain mocks base method.
func (m *MockBeaconClient) Domain(ctx context.Context, domainType phase0.DomainType, epoch phase0.Epoch) (phase0.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Domain", ctx, domainType, epoch)
	ret0, _ := ret[0].(phase0.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Domain indicates an expected call of Domain.
func (mr *MockBeaconClientMockRecorder) Domain(ctx, domainType, epoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Domain", reflect.TypeOf((*MockBeaconClient)(nil).Domain), ctx, domainType, epoch)
}

// MockProverClient is a mock of ProverClient interface.
type MockProverClient struct {
	ctrl     *gomock.Controller
	recorder *MockProverClientMockRecorder
}

// MockProverClientMockRecorder is the mock recorder for MockProverClient.
type MockProverClientMockRecorder struct {
	mock *MockProverClient
}

// NewMockProverClient creates a new mock instance.
func NewMockProverClient(ctrl *gomock.Controller) *MockProverClient {
	mock := &MockProverClient{ctrl: ctrl}
	mock.recorder = &MockProverClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProverClient) EXPECT() *MockProverClientMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockProverClient) Call(serviceMethod string, args, reply any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", serviceMethod, args, reply)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call.
func (mr *MockProverClientMockRecorder) Call(serviceMethod, args, reply any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockProverClient)(nil).Call), serviceMethod, args, reply)
}

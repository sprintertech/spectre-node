// Code generated by MockGen. DO NOT EDIT.
// Source: ./chains/evm/listener/events/handlers/rotate.go
//
// Generated by this command:
//
//	mockgen -source=./chains/evm/listener/events/handlers/rotate.go -destination=./mock/rotate.go -package mock
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	api "github.com/attestantio/go-eth2-client/api"
	v1 "github.com/attestantio/go-eth2-client/api/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockSyncCommitteeFetcher is a mock of SyncCommitteeFetcher interface.
type MockSyncCommitteeFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockSyncCommitteeFetcherMockRecorder
}

// MockSyncCommitteeFetcherMockRecorder is the mock recorder for MockSyncCommitteeFetcher.
type MockSyncCommitteeFetcherMockRecorder struct {
	mock *MockSyncCommitteeFetcher
}

// NewMockSyncCommitteeFetcher creates a new mock instance.
func NewMockSyncCommitteeFetcher(ctrl *gomock.Controller) *MockSyncCommitteeFetcher {
	mock := &MockSyncCommitteeFetcher{ctrl: ctrl}
	mock.recorder = &MockSyncCommitteeFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncCommitteeFetcher) EXPECT() *MockSyncCommitteeFetcherMockRecorder {
	return m.recorder
}

// SyncCommittee mocks base method.
func (m *MockSyncCommitteeFetcher) SyncCommittee(ctx context.Context, opts *api.SyncCommitteeOpts) (*api.Response[*v1.SyncCommittee], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncCommittee", ctx, opts)
	ret0, _ := ret[0].(*api.Response[*v1.SyncCommittee])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncCommittee indicates an expected call of SyncCommittee.
func (mr *MockSyncCommitteeFetcherMockRecorder) SyncCommittee(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncCommittee", reflect.TypeOf((*MockSyncCommitteeFetcher)(nil).SyncCommittee), ctx, opts)
}
